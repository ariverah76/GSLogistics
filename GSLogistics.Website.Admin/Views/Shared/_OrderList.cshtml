
@using GSLogistics.Website.Admin.Models
@model List<OrderAppointment>

<div class="row">
    <div class="panel panel-default" id="selectedPanel">
        <div class="panel-heading">
            Selected Orders For Appointment
        </div>
        <div class="panel panel-body">
            <table class="table table-hover" id="tableSelectedOrders">
                <thead>
                    <tr>
                        <th>Ship To</th>
                        <th>Start Date</th>
                        <th>Cancel Date</th>
                        <th>PO#</th>
                        <th>PT#</th>
                        <th>Pcs</th>
                        <th>Lbs</th>
                        <th>Ctns.</th>
                        <th>Cubic</th>
                        <th>Ctn Size</th>
                        <th>Bol</th>
                        <th style="display:none">DeliveryType</th>
                        <th style="display:none">ScacCode</th>
                        <th>ShipFor</th>
                    </tr>
                </thead>

            </table>
        </div>
    </div>
</div>
<div class="row">
    <div class="panel panel-default" id="paneltableOrders">
        <div class="panel-heading">
            Orders for Appointment
        </div>

        <div class="panel-body">
            <div class="row">
                <table class="table display-compact table-bordered table-striped" id="tableAppointments" cellspacing="0" style="width:100%">
                    <tfoot>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th>PO#</th>
                            <th>PT#</th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th></th>
                            <th></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th></th>
                        </tr>
                    </tfoot>
                    <thead>
                        <tr>
                            <th class="text-center">

                            </th>
                            <th>
                                @*@Html.DisplayNameFor(model => model.StoreName)*@
                                Ship To
                            </th>
                            <th>
                                Start Date
                            </th>
                            <th>Cancel Date</th>
                            <th>PO#</th>
                            <th>PT#</th>
                            <th>
                                Pcs
                                @*@Html.DisplayNameFor(model => model.Pieces)*@
                            </th>
                            <th>
                                Lbs@*@Html.DisplayNameFor(model => model.Weight)*@
                            </th>
                            <th>
                                Ctns.
                                @*@Html.DisplayNameFor(model => model.BoxesNumber)*@
                            </th>
                            <th>
                                Cubic
                                @*@Html.DisplayNameFor(model => model.Volume)*@
                            </th>
                            <th>
                                Ctn Size
                                @*@Html.DisplayNameFor(model => model.BoxSize)*@
                            </th>
                            <th>
                                Created
                                @*@Html.DisplayNameFor(model => model.EstimatedShippingDate)*@
                            </th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th>Notes</th>
                            <th>Conf #</th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th style="visibility:hidden"></th>
                            <th>Shipping</th>

                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model)
            {
                            <tr class="info">
                                <td></td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.StoreName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.StartDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EndDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PurchaseOrderId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PickTicketId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Pieces)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Weight)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.BoxesNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Volume)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.BoxSize)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EstimatedShippingDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PtBulk)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CustomerId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DivisionName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Notes)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ConfirmationNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DivisionId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.BillOfLading)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DeliveryTypeId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ScacCode)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ShipFor)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Shipping)
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>
</div>


               

<script type="text/javascript">
    
    $(document).ready(function () {


        $("#tableAppointments").DataTable({
            dom: 'Bfrtip',
            responsive: true,
            autoWidth: false,
            "displayLength": 15,
            deferRender: true,
            processing: true,
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 0
            }],
           
            "initComplete": function( settings, json ) {
                $('#loading').hide();
            },
            columns: [
                {
                    orderable: false
                },
                {
                    data: 'StoreName' // 1
                }
                ,
                {
                    data: 'StartDate' // 2

                }
                ,
                {
                    data: 'EndDate' // 3
                }
                ,
                {
                    data: 'PurchaseOrderId' //4
                }
                ,
                {
                    data: 'PickTicketId' //5
                }
                ,
                {
                    data: 'Pieces' // 6

                }
                ,
                {
                    data: 'Weight' //7
                }
                ,
                {
                    data: 'BoxesNumber' //8
                }
                ,
                {
                    data: 'Volume' //9
                }
                ,
                {
                    data: 'BoxSize' //10
                }
                ,
                {
                    data: 'EstimatedShippingDate' //11
                }
                ,
                {
                    data: 'PtBulk', visible: false //12
                }
                ,
                {
                    data: 'CustomerId', visible: false //13
                }
                ,
                {
                    data: 'DivisionName', visible: false //14
                }
                ,
                {
                    data: 'Notes', className: 'editable' //15
                }
                ,
                {
                    data: 'ConfirmationNumber' //16
                }
                ,
                {
                    data: 'DivisionId', visible: false //17
                }
                ,
                {
                    data: 'BillOfLading', visible: false //18
                }
                ,
                {
                    data: 'DeliveryTypeId', visible: false //19
                }
                ,
                {
                    data: 'ScacCode', visible: false //20
                }
                ,
                {
                    data: 'ShipFor', visible: false //21
                }
                ,
                {
                    data: 'Shipping' //22
                }




            ]
                ,
            select: {
                style: 'multi',
            },
            "drawCallback": function (settings) {
                var api = this.api();
                var rows = api.rows({ page: 'current' }).nodes();
                var last = null;

                api.column(14, { page: 'current' }).data().each(function (group, i) {
                    val = api.row(api.row($(rows).eq(i)).index()).data();
                    var client = val['CustomerId'];
                    if (last !== group) {
                        api.column
                        $(rows).eq(i).before(
                            '<tr class="group"><td colspan="15">' + client + ' - ' + group + '</td></tr>'
                        );

                        last = group;
                    }

                });
            },
            "createdRow": function (row, data, dataIndex) {
                if (data['ConfirmationNumber'].length > 0) {
                    $(row).css("background-color", "#EBE566");
                }
            }

        });


        $("#tableSelectedOrders").DataTable({
            dom: 'Bfrtip',
            responsive: true,
            columns: [
                {
                    data: 'ShipTo'
                }
                ,
                {
                    data: 'StartDate'
                }
                ,
                {
                    data: 'EndDate'
                }
                ,
                {
                    data: 'PurchaseOrderId'
                }
                ,
                {
                    data: 'PickTicketId'
                }
                ,
                {
                    data: 'Pieces'
                }
                ,
                {
                    data: 'Weigth'
                }
                ,
                {
                    data: 'BoxesCount'
                }
                ,
                {
                    data: 'Size'
                }
                ,
                {
                    data: 'BoxSize'
                }
                ,
                {
                    data: 'BillOfLading', visible: false
                }
                ,
                {
                    data: 'DeliveryTypeId', visible: false
                }
                ,
                {
                    data: 'ScacCode', visible: false
                }
                ,
                {
                    data: 'ShipFor', visible: false
                }
            ]

        });

        $('#tableAppointments tfoot th').each(function () {

            var title = $(this).text();
            if (title == "PO#" || title == "PT#") {


                $(this).html('<input type="text" style="width:80px" placeholder="Search ' + title + '" />');
            }
        });
        $('#tableAppointments tbody').on('click', 'tr.group', function () {
            var currentOrder = table.order()[0];
            if (currentOrder[0] === 2 && currentOrder[1] === 'asc') {
                table.order([14, 'desc']).draw();
            }
            else {
                table.order([14, 'asc']).draw();
            }
        });


        // DataTable
        var table = $("#tableAppointments").DataTable();
        var tableSelected = $("#tableSelectedOrders").DataTable();

        table.on('select', function (e, dt, type, indexes) {
            if (type == "row") {
                $("#selectedPanel").show(100);
                var data = table.rows(indexes).data();
                if (table.rows(indexes).nodes().to$().hasClass('selected') == false) {
                    //   // table.rows(indexes).nodes().to$().removeClass('selected');
                    return false;
                }
                console.log(table.rows(indexes).nodes().to$().hasClass('selected'));
                //tableSelected.row.add({
                //    "ShipTo": data[0]["StoreName"],
                //    "StartDate":data[0][2],
                //    "EndDate":data[0][3],
                //    "PurchaseOrderId": data[0]["PurchaseOrderId"],
                //    "PickTicketId": data[0]["PickTicketId"],
                //    "Pieces": data[0][6],
                //    "Weigth": data[0][7],
                //    "BoxesCount": data[0][8],
                //    "Size": data[0][9],
                //    "BoxSize": data[0][10],
                //    "BillOfLading": data[0]["BillOfLading"],
                //    "DeliveryTypeId": data[0]["DeliveryTypeId"],
                //    "ScacCode": data[0]["ScacCode"]
                //}).draw(false);

                var count = 0;
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("SearchByBol", "OrderAppointment")',
                    contentType: "application/json; charset=utf-8",
                    data: { "bol": data[0]["BillOfLading"] },
                    success: function (result) {


                        if (result.result == "Success") {
                            var orders = result.orders;
                            if (orders != null) {

                                count = orders.length;
                            }
                            for (var i = 0; i < orders.length; i++) {
                                //if (orders[i]["PurchaseOrderId"] != data[0]["PurchaseOrderId"]) {
                                tableSelected.row.add({
                                    "ShipTo": orders[i].ShipTo,
                                    "StartDate": ToDate(orders[i].StartDate),
                                    "EndDate": ToDate(orders[i].EndDate),
                                    "PurchaseOrderId": orders[i].PurchaseOrderId,
                                    "PickTicketId": orders[i].PickTicketId,
                                    "Pieces": orders[i].Pieces,
                                    "Weigth": orders[i].Weigth,
                                    "BoxesCount": orders[i].BoxesCount,
                                    "Size": orders[i].Size,
                                    "BoxSize": orders[i].BoxSize,
                                    "BillOfLading": orders[i].BillOfLading,
                                    "DeliveryTypeId": orders[i].DeliveryTypeId,
                                    "ScacCode": orders[i].ScacCode,
                                    "ShipFor": ToDate(orders[i].ShipFor)

                                }).draw(false);
                                var existingRow = table
                                    .rows(function (idx, info, node) {
                                        return info["PurchaseOrderId"] == orders[i].PurchaseOrderId && info["PickTicketId"] == orders[i].PickTicketId ?
                                        true : false;
                                    });

                                if (existingRow) {
                                    table.row(existingRow).nodes().to$().addClass('selected');
                                }
                                //}
                            }
                        }
                        else {
                            tableSelected.row.add({
                                "ShipTo": data[0]["StoreName"],
                                "StartDate": data[0]["StartDate"],
                                "EndDate": data[0]["EndDate"],
                                "PurchaseOrderId": data[0]["PurchaseOrderId"],
                                "PickTicketId": data[0]["PickTicketId"],
                                "Pieces": data[0]["Pieces"],
                                "Weigth": data[0]["Weight"],
                                "BoxesCount": data[0]["BoxesNumber"],
                                "Size": data[0]["Volume"],
                                "BoxSize": data[0]["BoxSize"],
                                "BillOfLading": data[0]["BillOfLading"],
                                "DeliveryTypeId": data[0]["DeliveryTypeId"],
                                "ScacCode": data[0]["ScacCode"],
                                "ShipFor": ToDate(data[0]["ShipFor"])
                            }).draw(false);

                        }
                        if (count > 1) {
                            toastr.info(count + " orders were found associated to Bill of Lading '" + data[0]["BillOfLading"] + "', and they are being added automatically for appointment", "Order associated to BOL", {
                                "closeButton": true, "positionClass": "toast-top-center", "preventDuplicates": true, "showDuration": "300",
                                "hideDuration": "1000",
                                "timeOut": "25000"
                            });

                        }
                    }
                });

            }
        });

        table.on('deselect', function (e, dt, type, indexes) {
            if (type === 'row') {
                var unselected = table.rows(indexes).data();

                var existingRow = tableSelected
                        .rows(function (idx, data, node) {
                            return data["PurchaseOrderId"] == unselected[0]["PurchaseOrderId"] && data["PickTicketId"] == unselected[0]["PickTicketId"] ?
                            true : false;
                        });
                if (existingRow) {
                    tableSelected.row(existingRow).remove().draw();
                    if (tableSelected.data().count() == 0) {
                        $("#selectedPanel").hide(500);
                    }

                }


            }
        });

        table.MakeCellsEditable({
            "onUpdate": myCallbackFunction,
            "columns": [15],
            "confirmationButton": true,
            "inputTypes": [
                {
                    "column": 0,
                    "type": "text",
                    "options": null
                }]

        });



        function myCallbackFunction(updatedCell, updatedRow, oldValue) {
            console.log("The new value for the cell is: " + updatedCell.data());
            console.log("The values for each cell in that row are: " + updatedRow.data());



            var model = {
                PurchaseOrderId: updatedRow.data()["PurchaseOrderId"],
                PickTicketId: updatedRow.data()["PickTicketId"],
                PtBulk: updatedRow.data()["PtBulk"],
                CustomerId: updatedRow.data()["CustomerId"],
                Notes: updatedCell.data()
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateOrderAppointment", "OrderAppointment")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(model),
                dataType: "json",
                success: function (result) {
                    toastr.success('Notes updated!')
                    //window.location.href = result.url;
                }
            });

        }

        // Apply the search
        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                    var str = this.placeholder;
                    if (str.includes("PT#")) {
                        console.log('search by pt');
                        if (table.page.info().recordsDisplay == 0) {
                            $.ajax({
                                type: "GET",
                                url: '@Url.Action("SearchPickTicket", "OrderAppointment")',
                                contentType: "application/json; charset=utf-8",
                                data: { "pickTicketId": this.value },
                                success: function (result) {
                                    if (result.result == "NotFound") {
                                        toastr.options = {
                                            "closeButton": true,
                                            "positionClass": "toast-bottom-full-width",
                                            "preventDuplicates": true
                                        };
                                        toastr.warning("Pick Ticket # " + result.pickTicketId + " has not been transferred to the database");
                                    }
                                    else {
                                        var dateString = result.shippingDate.substr(6);
                                        var currentTime = new Date(parseInt(dateString));
                                        var month = currentTime.getMonth() + 1;
                                        var day = currentTime.getDate();
                                        var year = currentTime.getFullYear();
                                        var date = month + "/" + day + "/" + year;
                                        var msg = "Pick Ticket has been set for ";
                                        msg = msg + "</br>" + " Appointment #: " + result.appointmentNumber;
                                        msg = msg + "</br>" + " Carrier: " + result.carrier;
                                        msg = msg + "</br>" + " Shipping Date: " + date;
                                        toastr.info(msg, "Pick Ticket found", {
                                            "closeButton": true, "positionClass": "toast-bottom-full-width", "preventDuplicates": true, "showDuration": "300",
                                            "hideDuration": "1000",
                                            "timeOut": "25000"
                                        });
                                    }
                                }
                            });
                        }

                    }
                    if (str.includes("PO#")) {
                        console.log('search by po');
                        if (table.page.info().recordsDisplay == 0) {
                            $.ajax({
                                type: "GET",
                                url: '@Url.Action("SearchPurchaseOrder", "OrderAppointment")',
                                contentType: "application/json; charset=utf-8",
                                data: { "purchaseOrder": this.value },
                                success: function (result) {
                                    if (result.result == "NotFound") {
                                        toastr.options = {
                                            "closeButton": true,
                                            "positionClass": "toast-bottom-full-width",
                                            "preventDuplicates": true
                                        };
                                        toastr.warning("PO # " + result.purchaseOrder + " has not been transferred to the database");
                                    }
                                    else {
                                        var dateString = result.shippingDate.substr(6);
                                        var currentTime = new Date(parseInt(dateString));
                                        var month = currentTime.getMonth() + 1;
                                        var day = currentTime.getDate();
                                        var year = currentTime.getFullYear();
                                        var date = month + "/" + day + "/" + year;
                                        var msg = "Purchase Order has been set for ";
                                        msg = msg + "</br>" + " Appointment #: " + result.appointmentNumber;
                                        msg = msg + "</br>" + " Carrier: " + result.carrier;
                                        msg = msg + "</br>" + " Shipping Date: " + date;
                                        toastr.info(msg, "Purchase Order found", {
                                            "closeButton": true, "positionClass": "toast-bottom-full-width", "preventDuplicates": true, "showDuration": "300",
                                            "hideDuration": "1000",
                                            "timeOut": "25000"
                                        });
                                    }
                                }
                            });
                        }

                    }

                }
            });
        });
        //table.on('search.dt', function () {
        //    console.log(table.page.info());
        //});

        $('#tableAppointments tbody tr').on('click', function (e) {
            var $row = $(this);

            if ($row.hasClass('selected')) {
                $row.removeClass('selected');
                e.stopPropagation();
                var existingRow = table
                    .rows(function (idx, info, node) {
                        return info["PurchaseOrderId"] == $row[0].cells[4].innerText && info["PickTicketId"] == $row[0].cells[5].innerText ?
                        true : false;
                    });
                if (existingRow != null) {
                    console.log('true');
                    table.rows(existingRow).deselect();
                }

            } else {
                $row.addClass('selected');
            }

        });

    });
</script>
