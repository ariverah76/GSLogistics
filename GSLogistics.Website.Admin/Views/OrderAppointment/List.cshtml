
@using GSLogistics.Website.Admin.Models
@using GSLogistics.Website.Common

@model  OrderAppointmentsIndex_ViewModel


@{
    ViewBag.Title = "Orders";
    AjaxOptions ajaxOptions = new AjaxOptions { UpdateTargetId = "panelBody", LoadingElementId = "loading", LoadingElementDuration = 1000 };
    AjaxOptions ajaxOptionsForOrders = new AjaxOptions { UpdateTargetId = "panelBodyOrders", LoadingElementId = "loadingOrders"};

}
@{
    var customers = this.ViewBag.Customers as SelectList;
    var divisions = this.ViewBag.Divisions as SelectList;
    var scacCodes = this.ViewBag.ScacCodes as SelectList;
    var appointmentStatus = this.ViewBag.AppointmentStatus as SelectList;
    var drivers = this.ViewBag.Drivers as SelectList;
    var trucks = this.ViewBag.Trucks as SelectList;
}
<style type="text/css">
    div.container {
        width: 80%;
    }

    /*#loading2 {
        width: 100%;
        height: 100%;
        position: fixed;
        top: 0;
        left: 0;
        background-color: rgba(0,0,0,.5);
        -webkit-transition: all .5s ease;
        z-index: 1000;
        display: none;
    }*/
    
    .blocking {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background : rgba(255,255,255,.8)
                    url("/8.gif")
                    50% 50%
                    no-repeat;
    
    }
    body.loading {
        overflow: hidden;
    }

    body.loading .blocking {
        display: block;
    }

</style>
<div class="row">
    <ul class="nav nav-pills nav-justified">
        <li class="active" role="presentation"><a data-toggle="pill" href="#orders"><h3>Orders</h3></a></li>
        <li role="presentation"><a data-toggle="pill" href="#appointments"><h3>Appointments</h3></a></li>
    </ul>
</div>

<div class="tab-content">
    <div id="orders" class="tab-pane fade in active">

        @*<h2>Orders</h2>*@
        @using (Ajax.BeginForm("GetOrdersForAppointment", ajaxOptionsForOrders))
        {
            <div class="row">
                <div class="btn-group btn-group-justified">

                    @if (User.IsInRole("Administrators"))
                    {
                        <a href="#" class="btn btn-info" onclick="setAppointment()">Set Appointment</a>
                        <a href="#" class="btn btn-info" onclick="showConfirmationNumberModal()">Set Confirmation #</a>
                        <a href="#" class="btn btn-info" id="btnReport">Download Report</a>
                    }
                    <a href="#" class="btn btn-info" id="btnRefresh">Refresh</a>

                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">Search</div>
                    <div class="panel-body">
                        @if (customers.Count() > 0)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SelectedClientId)
                                        @Html.DropDownListFor(m => m.SelectedClientId, customers, "Select", new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SelectedDivisionId)
                                        @Html.DropDownListFor(m => m.SelectedDivisionId, divisions, "Select", new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CancelDateStartDate)
                                    @Html.DatePicker(x => x.CancelDateStartDate, htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CancelDateEndDate)
                                    @Html.DatePicker(x => x.CancelDateEndDate, htmlAttributes:  new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @*<input type="checkbox" id="chkShipForSearch" />*@

                                    @Html.CheckBoxFor(m => m.EnableShipForFilter, new { @id = "chkShipForSearch" })
                                    @Html.LabelFor(model => model.ShipFor)
                                    @if (!Model.EnableShipForFilter)
                                    {
                                        @Html.DatePicker(x => x.ShipFor, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                    }
                                    else
                                    {
                                        @Html.DatePicker(x => x.ShipFor, htmlAttributes: new { @class = "form-control" })
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="row">

            <div class="panel-body" id="panelBodyOrders">
                <div id="loadingOrders" class="load" style="display:none">
                    <p>Loading Data...</p>
                    @*<img src="@Url.Content("~/8.gif")" />*@ 
                </div>

                @*@{ Html.RenderPartial("_AppointmentList", Model.Appointments); }*@
                @Html.Action("GetOrdersForAppointment", Model)
            </div>

        </div>
    </div>
    <div id="appointments" class="tab-pane fade">
        @*<h2>Appointments</h2>*@
        <div class="row">
            <div class="panel panel-default">
                <div class="panel-heading">
                </div>
                @using (Ajax.BeginForm("GetAppointments", ajaxOptions))
                {

                    <div class="btn-group btn-group-justified">
                        @if (User.IsInRole("Administrators"))
                        {
                            <a href="#" class="btn btn-info" onclick="postAppointment()">Post Appointments</a>
                            <a href="#" class="btn btn-info" onclick="deleteAppointment()">Cancel Appointments</a>
                            <a href="#" class="btn btn-info" onclick="editAppointment()">Edit Appointments</a>
                        }
                        <a href="@Url.Action("LogReport", "OrderAppointment")" class="btn btn-info">Log Report</a>
                        <a href="#" class="btn btn-info" id="btnRefreshAppt">Refresh</a>

                    </div>
                        <div class="panel panel-default">
                            <div class="panel-heading">Search</div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SelectedStatus)
                                            @Html.DropDownListFor(x => x.SelectedStatus, appointmentStatus, "Select", new { @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.AppointmentNumberSearch)
                                            @Html.TextBoxFor(x => x.AppointmentNumberSearch, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ShippingDateStart)
                                            @Html.DatePicker(x => x.ShippingDateStart,minDateDays:-2, htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ShippingDateEnd)
                                            @Html.DatePicker(x => x.ShippingDateEnd, minDateDays: 0, htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                }
                <div class="panel-body" id="panelBody">
                    <div id="loading" class="load" style="display:none">
                        <p>Loading Data...</p>
                    </div>

                    @*@{ Html.RenderPartial("_AppointmentList", Model.Appointments); }*@
                    @Html.Action("GetAppointments", Model)
                </div>
            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="setConfirmationNumberModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dissmiss="modal" aria-hidden="true"></button>
                <h3 class="modal-title">Set Confirmation Number</h3>
                <h4 class="pull-right"><span id="totalOrdersSelectedLabel"></span></h4>
            </div>
            <div class="modal-body">
                <form role="form" class="validate">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ConfirmationNumber)
                                @Html.TextBoxFor(m => m.ConfirmationNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ConfirmationNumber)
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">Close</button>
                <button type="button" id="btnSaveConfNumber" onclick="setNewConfirmationNumber()" class="btn btn-info">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="setAppointmentModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dissmiss="modal" aria-hidden="true"></button>
                <h3 class="modal-title">Set appointment</h3>
                <h4 class="pull-left"><span id="totalOrdersLabel"></span></h4>

            </div>
            <div class="modal-body">
                <form role="form" class="validate">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.DeliveryTypeId)
                                    <div class="radio-inline">
                                        @Html.RadioButtonFor(m => m.DeliveryTypeId, 1, new { id = "IsPickup" })
                                        <span style="padding-right:20px">Pickup</span>
                                        @Html.RadioButtonFor(m => m.DeliveryTypeId, 2, new { id = "IsDelivery" })
                                        <span>Delivery</span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.DeliveryTypeId)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AppointmentNumber)
                                    @Html.TextBoxFor(m => m.AppointmentNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.AppointmentNumber)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ShippingDate)
                                    @Html.DatePicker(m => m.ShippingDate, minDateDays: -2, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.ShippingDate)
                                    @*@Html.DatePicker(m => m.ReScheduleDate, minDateDays: -2, htmlAttributes: new { @class = "form-control" })*@

                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Pallets)
                                    @Html.TextBoxFor(model => model.Pallets, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.Pallets)
                                </div>
                                <div id="panelTruckInfo" style="display:none">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DriverId)
                                        @Html.DropDownListFor(m => m.DriverId, drivers, "Select", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.DriverId)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TruckId)
                                        @Html.DropDownListFor(m => m.TruckId, trucks, "Select", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.TruckId)
                                    </div>
                                </div>

                            </div>
                            
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ShippingTime)
                                    @Html.DateTimePicker(model => model.ShippingTime, new Dictionary<string, object> { { "class", "startDate form-control" } }, jsFormat: "hh:ii p", cFormat: "LT", todayHighlight: false, minView: DateTimePickerView.Hour, startView: DateTimePickerView.Day)
                                    @Html.ValidationMessageFor(m => m.ShippingTime)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ShippingTimeLimit)
                                    @Html.DateTimePicker(model => model.ShippingTimeLimit, new Dictionary<string, object> { { "class", "endDate form-control" } }, jsFormat: "hh:ii p", cFormat: "LT", todayHighlight: false, minView: DateTimePickerView.Hour, startView: DateTimePickerView.Day)
                                    @Html.ValidationMessageFor(m => m.ShippingTimeLimit)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShippingCompanyId)
                                    @Html.DropDownListFor(m => m.ShippingCompanyId, scacCodes, "Select", new { @class = "form-control"})
                                    @Html.ValidationMessageFor(m => m.ShippingCompanyId)
                                </div>
                                
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Notes)
                                    @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", @style = "min-width: 100%" })
                                    @Html.ValidationMessageFor(m => m.Notes)
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <div class="row" id="summary">
                    <div class="col-md-4">
                        <ul class="list-group" >
                            <li class="list-group-item"><span class="badge" id="totPcs"></span>Total Pieces:&nbsp;</li>
                            <li class="list-group-item"><span class="badge" id="totalCtns"></span>Total Ctns:&nbsp;</li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <ul class="list-group">
                            <li class="list-group-item"><span class="badge" id="totalgohs"></span>Total GOH's:&nbsp;</li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <ul class="list-group">
                            <li class="list-group-item"><span class="badge" id="totalLbs"></span>Total Weight:&nbsp;</li>
                            <li class="list-group-item"><span class="badge" id="totalCubic"></span>Total Cubic:&nbsp;</li>
                        </ul>
                    </div>
                    
                </div>
               
               
                <button type="button" class="btn btn-white" data-dismiss="modal">Close</button>
                <button type="button" id="btnSave" onclick="setNewAppointment()" class="btn btn-info">Set Appointment</button>
            </div>
        </div>
    </div>
</div>
@*<div id="loading"></div>*@
<div class="blocking"></div>

@Scripts.Render("~/bundles/datetimepicker")
@Scripts.Render("~/bundles/dataTables")
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/DataTables/dataTables.select.min.js"></script>

<script type="text/javascript">

    var editor;

    
    $("#selectedPanel").hide();

    

    $(document).ready(function () {
        (function (seconds) {
            var refresh,
                intvrefresh = function () {
                    clearInterval(refresh);
                    refresh = setTimeout(function () {
                        // location.href = location.href;
                        window.location.reload(1);
                    }, seconds * 1000);
                };

            $(document).on('keypress click', function () { intvrefresh() });
            intvrefresh();

        }(300));

        $.validator.addMethod("endDate", function(value, element) {
            var startDate = $('.startDate').val();
            if (value == ""){
                return true;
            }
            else{
                var d1 = new Date('October 13, 2014 '+ startDate.replace("am", "").replace("pm", ""));
                var d2 = new Date('October 13, 2014 ' + value.replace("am", "").replace("pm", "") );
                return d1 <= d2 ;
            }
        
        }, "* End date must be after start date");

        $(document).ajaxStop(function () {
            $body = $("body");
            console.log('ajax stop');
            $body.removeClass("loading");

        });

        $(document).ajaxStart(function () {
            $body = $("body");
            console.log('ajax started');
            $body.addClass("loading")
        });

      
        $("#ShippingCompanyId").select2();
        $("#SelectedClientId").select2();
        $("#SelectedDivisionId").select2();
       // $("#ShipFor").attr('disabled', 'disabled');

        $(".select2-container").width(300);


        $("input:radio").change(function () {
            
            var deliveryType = $('input[name = DeliveryTypeId]:checked').val();
            if (deliveryType == 2) {
                $("#panelTruckInfo").show();
            }
            else {
                $("#panelTruckInfo").hide();
                $("#TruckId").val('').change();
                $("#DriverId").val('').change();
            }
        });
       
            $('.datetimepicker-minutes .switch').attr('style', 'visibility:hidden;');
            $('.datetimepicker-hours .switch').attr('style', 'visibility:hidden;');


            $("#btnRefresh").click(function () {
                $(this).closest("form").submit();
            });
            $("#btnRefreshAppt").click(function () {
                $(this).closest("form").submit();
                $("#appointments").tab('show');

            });


            $('#chkShipForSearch').change(function () {
                if ($('#chkShipForSearch').prop('checked') == true) {
                    $('#ShipFor').removeAttr('disabled');
                    $('#CancelDateStartDate').attr('disabled', 'disabled');
                    $('#CancelDateEndDate').attr('disabled', 'disabled');

                } else {
                    $('#ShipFor').attr('disabled', 'disabled');
                    $('#CancelDateStartDate').removeAttr('disabled');
                    $('#CancelDateEndDate').removeAttr('disabled');
                }


            });


            $("#SelectedClientId").change(function () {
                var selectedItem = $(this).val();
                var ddDivisions = $("#SelectedDivisionId");
                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: '@Url.Action("GetDivisionByClient","OrderAppointment")',
                    data: { "customerId": selectedItem },
                    success: function (data) {
                        ddDivisions.html('');
                        $.each(data, function (id, option) {
                            ddDivisions.append($('<option></option>').val(option.Id).html(option.Name));

                        });


                    }
                    , error: function (xhr, ajaxOptions, thrownError) {
                        toastr.error('Failed to get Divisions');
                    }
                });


            });

    });

    function editAppointment() {
        var table = $("#tableappt").DataTable();
        var selected = table.rows('.selected').data();
        if (selected.length == 0) {
            toastr.warning("Please select at least an Order");
            return false;
        }

        //if (selected.length > 1) {
        //    toastr.warning("Only one order can be edited at time");
        //    return false;
        //}
        var appts = new Array();
        var bols = new Array();


        var hasBol = false;
        for (var i = 0; i < selected.length; i++) {
            appts.push(selected[i]["AppointmentNo"]);
            bols.push(selected[i]["BillOfLading"])

            if (selected[i]["BillOfLading"].length > 0) {
                hasBol = true;
            }
        }

        var allSameAppointmentNumber = appts.allValuesSame();
        var allSameBols = bols.allValuesSame();

        if (allSameAppointmentNumber == false || allSameBols == false){
            toastr.warning("Please ensure all the Appointments are grouped on the same Appointment Number or Bill of Lading");
        }
        else {
            var today = new Date();

            $('#setAppointmentModal').modal({
                show: true,
                backdrop: "static"
            });
            $("#AppointmentNumber").val(selected[0]["AppointmentNo"]);
            $("#ShippingDate").val(selected[0]["ShipDate"]);
            $("#ShippingTime").val(selected[0]["ShipTime"]);
            $("#ShippingCompanyId").val(selected[0]["ScaccCode"]).change();
            $("#Pallets").val(selected[0]["Pallets"]);
            $("#TruckId").val(selected[0]["TruckId"]).change();
            $("#DriverId").val(selected[0]["DriverId"]).change();
          //  $("#RescheduleDate").hide();

            $('#totalOrdersLabel').hide();
          //  $("#ShippingDate").prop('disabled', true);

            var shippingDate = new Date(selected[0]["ShipDate"]);

            //if (shippingDate < today) {
            //    if (confirm("Appointment date is on overdue, do you want to re-schedule?")) {
            //       // $("#ShippingDate").prop('disabled', false);
            //        $("#ShippingDate").hide();
            //        $("#ReScheduleDate").show();
            //        $("#ReScheduleDate").val(selected[0]["RescheduleDate"]);
            //    }
            //    else {
            //        $("#ShippingDate").show();
            //        $("#ReScheduleDate").hide();
            //    }
            //}
            if (hasBol == true) {
               
                $("#ShippingCompanyId").prop('disabled', true)
                $('input[name = DeliveryTypeId]').attr('disabled', 'disabled');
                $("#ShippingDate").prop('disabled', true);
            }
            else {
                $("#ShippingCompanyId").prop('disabled', false)
                $('input[name = DeliveryTypeId]').removeAttr('disabled');
                $("#ShippingDate").prop('disabled', false);
            }

            var dt = selected[0]["DeliveryTypeId"];
            if (dt == "1") {
                $("#IsPickup").prop("checked", true);
                $("#panelTruckInfo").hide();
            }
            else if (dt == "2") {
                $("#IsDelivery").prop("checked", true);
                $("#panelTruckInfo").show();
            }
            
            $("#summary").hide();

            $('#btnSave').html("Save");
            $('#btnSave').attr('onclick', 'saveEditedAppointments()')
            $('#setAppointmentModal form').validate();
        }


    }

    function saveEditedAppointments() {
        var table = $("#tableappt").DataTable();
        if ($('#setAppointmentModal form').valid()) {
            var selected  = table.rows('.selected').data();
            var orders = new Array();

            for (var i = 0; i < selected.length; i++) {

                var orderWithAppointment = {
                    PurchaseOrderId: selected[i]["PurchaseOrder"],
                    PickTicketId: selected[i]["PickTicket"],
                    CustomerId: selected[i]["CustomerId"],
                    DateAdded: selected[i]["DateAdded"]
                };
                orders.push(orderWithAppointment);
            }

            var model = {};
            model.AppointmentNumber = $("#AppointmentNumber").val();
            model.Shippingdate = $("#ShippingDate").val();
            model.ShippingTime = $("#ShippingTime").val();
            model.ScacCode = $("#ShippingCompanyId").val(); 
            model.ShippingTimeLimit = $('#ShippingTimeLimit').val();
            model.DeliveryTypeId = $('input[name = DeliveryTypeId]:checked').val();
            // model.ReScheduleDate = $("#ReScheduleDate").val();
            model.DriverId = $("#DriverId").val();
            model.TruckId = $("#TruckId").val();
            model.Notes = $("#Notes").val();
            var pallets = $("#Pallets").val();


            if (pallets.length > 0) {
                pallets = parseInt(pallets);
            }
            else {
                pallets = null;
            }
            model.Pallets = pallets;
            model.Orders = orders;

            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveEditedAppointment", "OrderAppointment")',
                contentType: "application/json; charset=utf-8",
                data:  JSON.stringify(model),
                dataType: "json",
                success: function (result) {
                    toastr.success('Appointment set successfully');
                    $("#btnRefreshAppt").trigger("click");
                    //window.location.href = "GetAppointments";
                }
            });
            $('#setAppointmentModal').modal("hide");


        }
    }

    Array.prototype.allValuesSame = function () {
        for (var i = 1; i < this.length; i++) {
            if (this[i] !== this[0])
                return false;
        }

        return true;
    };

    function showConfirmationNumberModal() {
        var table = $("#tableAppointments").DataTable();
        var selected = table.rows('.selected').data();
        if (selected.length == 0) {
            toastr.warning("Please select at least an Order");

            return false;
        }
        $('#totalOrdersSelectedLabel').html(function (n, c) {
            return selected.length + ' selected order(s)'
        });
        $('#setConfirmationNumberModal').modal({
            show: true,
            backdrop: "static"
        });

        $('#setConfirmationNumberModal form').validate();
    }

    function setNewConfirmationNumber() {
        var table = $("#tableAppointments").DataTable();
        if ($('#setConfirmationNumberModal form').valid()) {

            var selected = table.rows('.selected').data();

            var orders = new Array();
            for (var i = 0; i < selected.length; i++) {

                var orderForAppointment = {
                    PurchaseOrderId: selected[i]["PurchaseOrderId"],
                    PickTicketId: selected[i]["PickTicketId"],
                    PtBulk: selected[i]["PtBulk"],
                    CustomerId: selected[i]["CustomerId"]
                };
                orders.push(orderForAppointment);

            }
            var model = {};
            model.ConfirmationNumber = $("#ConfirmationNumber").val();
            model.Orders = orders;

            $.ajax({
                type: "POST",
                url: '@Url.Action("SetConfirmationNumber", "OrderAppointment")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(model),
                dataType: "json",
                success: function (result) {
                    toastr.success('Confirmation Number set successfully');
                    $("#btnRefresh").trigger("click");
                   // window.location.href = "List";
                }
            });
            $('#setAppointmentModal').modal("hide");
            $("#ConfirmationNumber").val('');
        }
    }

    function setAppointment() {
        clearAppointmentForm();
        var shippingDateValidation = @ViewBag.ValidateShippingDate.ToString().ToLower();
        var table = $("#tableAppointments").DataTable();
        
        $("#summary").show();
        
        var t2 = $("#tableSelectedOrders").DataTable();
        var selected = table.rows('.selected').data();
        var selected2 = t2.rows().data();
        if (selected.length == 0) {
            toastr.warning("Please select at least an Order");
            return false;
        }
        $('#totalOrdersLabel').html(function(n, c) {
            return selected.length + ' order(s) to assign'
        });
        $('#totalOrdersLabel').show();

        $('#btnSave').attr('onclick', 'setNewAppointment()')

        var totalPieces = 0;
        var totalCtns = 0;
        var totalLbs = 0;
        var totalCubic = 0;
        var gohs = 0;
        var hasBol = false;
        var bols = new Array();

        for (var i = 0; i < selected2.length; i++) {

            totalPieces += Number(selected2[i]["Pieces"]);
            totalLbs += Number(selected2[i]["Weigth"]);
            totalCtns += Number(selected2[i]["BoxesCount"]);
            totalCubic += Number(selected2[i]["Size"]);
            if (selected2[i]["BoxSize"] == "GOH") {
                gohs += Number(selected2[i]["Pieces"]);
            }

            if (selected2[i]["BillOfLading"].length > 0){
                hasBol = true;
            }

            bols.push(selected2[i]["BillOfLading"]);

        }

        if (bols.length > 0) {
            var allSameBol = bols.allValuesSame();
        }
        if (allSameBol == false) {
            toastr.error("Please ensure all the Orders have same Bill of Lading Number ","Please review!", {
            "closeButton": true, "timeOut": "8000"
            });
            return false;
        }
        

        $('#totPcs').html(function (n, c) {
            return totalPieces;
        });
        $('#totalCtns').html(function (n, c) {
            return totalCtns ;
        });
        $('#totalCubic').html(function (n, c) {
            return totalCubic;
        });
        $('#totalLbs').html(function (n, c) {
            return totalLbs ;
        });
        if (gohs > 0) {
            $('#totalgohs').html(function (n, c) {
                return gohs;
            });
        }
        else {
            $(".list-group li:has(span[id='totalgohs'])").remove();
           
        }
        $("#ShippingDate").show();

        var dt = selected2[0]["DeliveryTypeId"];
        if (dt == "") {
            $("#panelTruckInfo").hide()
        }
        if (hasBol == true) {
            $("#ShippingCompanyId").val(selected2[0]["ScacCode"]).change();
            $("#ShippingCompanyId").prop('disabled', true)
           
           
            if (dt == "1") {
                $("#IsPickup").prop("checked", true);
                $("#panelTruckInfo").hide();
            }
            else if (dt == "2") {
                $("#IsDelivery").prop("checked", true);
                $("#panelTruckInfo").show();
            }
            $('input[name = DeliveryTypeId]').attr('disabled', 'disabled');

            $("#ShippingDate").val(selected2[0]["ShipFor"]);

            if(shippingDateValidation == true) {
               $("#ShippingDate").prop('disabled', true);
            }
        }

        


        $('#setAppointmentModal form').validate();

        $('#setAppointmentModal').modal({
            show: true,
            backdrop: "static"
        });



    }

    function clearAppointmentForm() {
        $('#ShippingDate').val('');
        $('#ShippingTime').val('');
        $("#ShippingCompanyId")[0].selectedIndex = 0;
        $("#AppointmentNumber").val('');
        $("#Pallets").val('');
        $("#Notes").val('');
        $("#ShippingTimeLimit").val('');
        $("#ShippingCompanyId").val('').trigger('change');
        $('input[name = DeliveryTypeId]').attr('checked', false);
      //  $('#ReScheduleDate').val('');
        $('input[name = DeliveryTypeId]').removeAttr('disabled');

        $("#ShippingCompanyId").prop('disabled', false)
        $("#ShippingDate").prop('disabled', false);

        $("#DriverId").val('').trigger('change');
        $("#TruckId").val('').trigger('change');
        $("#panelTruckInfo").hide();

    }


        function setNewAppointment() {
            var table = $("#tableAppointments").DataTable();


            if ($('#setAppointmentModal form').valid()) {

                var selected  = table.rows('.selected').data();

                var orders = new Array();



                for (var i = 0; i < selected.length; i++) {

                    var orderForAppointment = {
                        PurchaseOrderId: selected[i]["PurchaseOrderId"],
                        PickTicketId: selected[i]["PickTicketId"],
                        PtBulk: selected[i]["PtBulk"],
                        CustomerId: selected[i]["CustomerId"],
                        DivisionId: selected[i]["DivisionId"]
                    };
                    orders.push(orderForAppointment);
                }

                var model = {};
                model.AppointmentNumber = $("#AppointmentNumber").val();
                model.Shippingdate = $("#ShippingDate").val();
                model.ShippingTime = $("#ShippingTime").val();
                model.ScacCode = $("#ShippingCompanyId").val();
                model.ShippingTimeLimit = $('#ShippingTimeLimit').val();
                model.DeliveryTypeId = $('input[name = DeliveryTypeId]:checked').val();
                model.Pallets = $("#Pallets").val();
                model.TruckId = $("#TruckId").val();
                model.DriverId = $("#DriverId").val();
                model.Notes = $("#Notes").val();

                model.Orders = orders;

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("SetAppointment", "OrderAppointment")',
                    contentType: "application/json; charset=utf-8",
                    data:  JSON.stringify(model),
                    dataType: "json",
                    success: function (result) {
                        $("#selectedPanel").hide();
                        if (result.result !== "") {
                            toastr.error(result.result);
                        } else {
                            toastr.info('Appointment set successfully');
                        }
                       
                        $("#btnRefresh").trigger("click");
                        //window.location.href = "List";
                    },
                    error: function (result) {
                        toastr.error(result.result);
                    }
                });
                $('#setAppointmentModal').modal("hide");

            }
        }

        function postAppointment() {
            var table = $("#tableappt").DataTable();
            
            var selected = table.rows('.selected').data();
            if (selected.length == 0) {
                toastr.warning("Please select at least one Appointment");
                return false;
            }
            
            var today = new Date();
            today.setHours(0, 0, 0, 0);

            var apptNos = new Array();
            var bols = new Array();
            var carriers = new Array();
            var overdue = false;

            for (var i = 0; i < selected.length; i++) {
                var shippingDate = new Date(selected[i]["ShipDate"]);
                //console.log(shippingDate);
                //console.log("today:");
                //console.log(today);

                apptNos.push(selected[i]["AppointmentNo"]);
                bols.push(selected[i]["BillOfLading"]);
                carriers.push(selected[i]["Carrier"])
                
                if (shippingDate < today) {
                    overdue = true;
                    
                    var timeStamp = Date.parse(selected[i]["RescheduleDate"]);
                    if (isNaN(timeStamp) == false) {
                        var reScheduleDate = new Date(selected[i]["RescheduleDate"]);
                        //console.log("reScheduleDate:")
                        //console.log(reScheduleDate);
                        if (reScheduleDate < today) {
                            overdue = true;
                        }
                        else {
                            overdue = false;
                        }
                    }

                }
                 
            }

            if (bols.length > 0) {
                var allSameBol = bols.allValuesSame();
            }
            if (apptNos.length > 0) {
                var allSameApptNo = apptNos.allValuesSame();
            }
            if (carriers.length > 0) {
                var allSameCarriers = carriers.allValuesSame();
            }
            
            if (allSameCarriers == false) {
                toastr.error("Please ensure all the Orders tied to the same carrier ","Please review!", {
                        "closeButton": true, "timeOut": "8000"
                        });
                        return false;
            }

            //if (overdue == true) {
            //    toastr.error("Please ensure all the Orders has a valid Shipping Date","Please review!", {
            //            "closeButton": true, "timeOut": "8000"
            //            });
            //            return false;
            //}

            //if (allSameBol == false || apptNos == false) {
            //    toastr.error("Please ensure all the Orders have same Bill of Lading Number and/or Appointment Number ","Please review!", {
            //    "closeButton": true, "timeOut": "8000"
            //    });
            //    return false;
            //}
            
            $("#summary").show();

            if (confirm('Are you sure you want to post these ' + selected.length + ' selected appointments ?')) {
                var selected = table.rows('.selected').data();

                var appointments = new Array();



                for (var i = 0; i < selected.length; i++) {

                    var appointment = {
                        CustomerId: selected[i]["CustomerId"],
                        PickTicket: selected[i]["PickTicket"],
                        AppointmentNo: selected[i]["AppointmentNo"],
                        Posted: true
                    };
                    appointments.push(appointment);
                }

                var model = {};
                model.Action = 1;
                model.Appointments = appointments;

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ActionAppointments", "OrderAppointment")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(model),
                    dataType: "json",
                    success: function (result) {
                        if (result.result == "") {
                            toastr.success('Appointment(s) posted successfully');
                        }
                        else {
                            toastr.error(result.result);
                        }
                        
                        table.rows('.selected').remove().draw(false);
                    }

                });

            }

        }

    function deleteAppointment() {
        var table = $("#tableappt").DataTable();
        var selected = table.rows('.selected').data();
        if (selected.length == 0) {

            toastr.warning("Please select at least one Appointment");
            return false;
        }

        if (confirm('Are you sure you want to cancel these ' + selected.length + ' selected appointments ?')) {
            var selected = table.rows('.selected').data();

            var appointments = new Array();

            for (var i = 0; i < selected.length; i++) {

                var appointment = {
                    CustomerId: selected[i]["CustomerId"],
                    PickTicket: selected[i]["PickTicket"],
                    AppointmentNo: selected[i]["AppointmentNo"],
                    PurchaseOrderId: selected[i]["PurchaseOrder"],
                    Posted: false,
                    Status: "D"
                };
                appointments.push(appointment);
            }

            var model = {};
            model.Action = 2;
            model.Appointments = appointments;

            $.ajax({
                type: "POST",
                url: '@Url.Action("ActionAppointments", "OrderAppointment")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(model),
                dataType: "json",
                success: function (result) {
                    if (result.result == "") {
                        toastr.success('Appointment(s) cancelled successfully');
                        
                    }
                    else {
                        toastr.error(result.result);

                    }
                    table.rows('.selected').remove().draw(false);
                }

            });

        }

    }

    $("#btnReport").click(function () {
        var model = getDataForReport();

        postReport(model);


    });


    function getDataForReport() {
        var model = {
            SelectedClientId: $("#SelectedClientId").val(),
            SelectedDivisionId: $("#SelectedDivisionId").val(),
            CancelDateStartDate: $("#CancelDateStartDate").val(),
            CancelDateEndDate: $("#CancelDateEndDate").val(),
            ShipFor: $('#ShipFor').val(),

        };

        return model;
    }

    function postReport(model) {
        toastr.info("Downloading Report...");
        $.ajax({
            type: "POST",
            url: '@Url.Action("GenerateOrdersReport", "OrderAppointment")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(model),
            dataType: "json",

        }).done(function (returnValue) {
            if (returnValue.success) {
                window.location.href = "/OrderAppointment/DownloadReport?reportName=" + returnValue.fName + "&format=" + returnValue.mimeType + "&fileExtension=" + returnValue.ReportFormat;
                toastr.success("Report downloaded!");
            }
        }).fail(function () {
            toastr.error("Error downloading the report");
        });
    }

    function ToDate(date) {
        var dateString = date.substr(6);
        var currentTime = new Date(parseInt(dateString));
        var month = currentTime.getMonth() + 1;
        var day = currentTime.getDate();
        var year = currentTime.getFullYear();
        var date = month + "/" + day + "/" + year;

        return date;
    }
    



</script>

@Styles.Render("~/Content/datetimepicker")
@*@Styles.Render("~/Content/datatables")*@